services:
  # Discovery Service (Eureka)
  discovery-service:
    build:
      context: ./services/discovery
      dockerfile: Dockerfile
    container_name: discovery-service
    image: ezzdinbz/discovery-service
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_INSTANCE_HOSTNAME=discovery-service
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - EUREKA_CLIENT_REGISTER-WITH-EUREKA=false
      - EUREKA_CLIENT_FETCH-REGISTRY=false
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  # Config Server
  config-server:
    build:
      context: ./services/config-server
      dockerfile: Dockerfile
    container_name: config-server
    image: ezzdinbz/config-server
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=native,docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    volumes:
      - ./services/config-server/src/main/resources/configurations:/app/configurations
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  # API Gateway
  gateway-service:
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    container_name: gateway-service
    image: ezzdinbz/gateway-service
    ports:
      - "8222:8222"
    environment:
      - SPRING_PROFILES_ACTIVE=docker,native
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_GATEWAY=DEBUG
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
      - SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER_URI=http://keycloak:8080/realms/student_accommodation
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://keycloak:8080/realms/student_accommodation
    networks:
      - microservices-net
    depends_on:
      discovery-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8222/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  # Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    command: start-dev
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=adminpassword
      - DB_VENDOR=mysql
      - DB_ADDR=mysql
      - DB_DATABASE=msdb
      - DB_USER=univer
      - DB_PASSWORD=univer
      - PROXY_ADDRESS_FORWARDING=true
      - KEYCLOAK_FRONTEND_URL=http://localhost:8180
      - KC_HOSTNAME=localhost  # Explicit hostname
      - KC_HTTP_CORS_ORIGINS=http://localhost:5173
      - KC_HTTP_CORS_ALLOWED_METHODS=GET,POST,PUT,DELETE,OPTIONS
      - KC_HTTP_CORS_ALLOWED_HEADERS=*
      - KC_HTTP_CORS_ALLOW_CREDENTIALS=true
    volumes:
      - keycloak_data:/opt/keycloak/data
    ports:
      - "8180:8080"
    depends_on:
      - mysql
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8180/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  # MySQL
  mysql:
    container_name: ms_mysql
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: univer
      MYSQL_DATABASE: msdb
      MYSQL_USER: univer
      MYSQL_PASSWORD: univer
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - microservices-net
    restart: unless-stopped

  # PhpMyAdmin
  phpmyadmin:
    container_name: ms_phpmyadmin
    image: phpmyadmin/phpmyadmin
    depends_on:
      - mysql
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_ARBITRARY: 1
    ports:
      - "8086:80"
    networks:
      - microservices-net
    restart: unless-stopped

  # MongoDB
  mongodb:
    image: mongo
    container_name: mongo_db
    networks:
      - microservices-net
    ports:
      - "27017:27017"
    volumes:
      - mongo:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: univer
      MONGO_INITDB_ROOT_PASSWORD: univer
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
  # Mongo Express
  mongo-express:
    image: mongo-express
    container_name: mongo_express
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - microservices-net
    restart: always
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=univer
      - ME_CONFIG_MONGODB_ADMINPASSWORD=univer
      - ME_CONFIG_MONGODB_SERVER=mongo_db
      - ME_CONFIG_BASICAUTH=true
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=adminpassword
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=false
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 10s
      timeout: 5s
      retries: 10

  # MailDev
  mail-dev:
    container_name: ms-mail-dev
    image: maildev/maildev
    ports:
      - "1080:1080"
      - "1025:1025"
    networks:
      - microservices-net
    restart: unless-stopped

  # Mailing Service (Node.js)
  mailing-service:
    build:
      context: ./services/mailing-MS
      dockerfile: Dockerfile
    container_name: mailing-service
    image: ezzdinbz/mailing-service
    environment:
      - NODE_ENV=development
      - MAIL_HOST=mail-dev
      - MAIL_PORT=1025
      - MONGO_URI=mongodb://univer:univer@mongo_db:27017/mailing_db?authSource=admin
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    ports:
      - "4000:4000"
    networks:
      - microservices-net
    depends_on:
      - discovery-service
      - mail-dev
      - mongodb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  # React Frontend
  frontend:
    build:
      context: ./services/mon-universite-front
      dockerfile: Dockerfile
    container_name: frontend
    image: ezzdinbz/frontend
    ports:
      - "5173:5173"
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  # Services m√©tier
  university-service:
    build:
      context: ./services/University
      dockerfile: Dockerfile
    container_name: university-service
    image: ezzdinbz/university-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
      - SPRING_DATASOURCE_URL=jdbc:h2:file:./Database/Data/University
      - SPRING_DATASOURCE_USERNAME=sa
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_HIBERNATE_DDL-AUTO=update
      - SPRING_H2_CONSOLE_ENABLED=true
      - SPRING_H2_CONSOLE_SETTINGS_WEB-ALLOW-OTHERS=true
    volumes:
      - university-h2-data:/app/Database/Data
    ports:
      - "8087:8087"
    networks:
      - microservices-net
    depends_on:
      discovery-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  foyer-service:
    build:
      context: ./services/Foyer
      dockerfile: Dockerfile
    container_name: foyer-service
    image: ezzdinbz/foyer-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
      - SPRING_DATASOURCE_URL=jdbc:h2:file:./Database/Data/Foyer
      - SPRING_DATASOURCE_USERNAME=sa
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_HIBERNATE_DDL-AUTO=update
      - SPRING_H2_CONSOLE_ENABLED=true
      - SPRING_H2_CONSOLE_SETTINGS_WEB-ALLOW-OTHERS=true
    volumes:
      - foyer-h2-data:/app/Database/Data
    ports:
      - "8085:8085"
    networks:
      - microservices-net
    depends_on:
      discovery-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  bloc-chambre-service:
    build:
      context: ./services/BlocChambre
      dockerfile: Dockerfile
    container_name: BlocChambre-service
    image: ezzdinbz/bloc-chambre-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/msdb
      - SPRING_DATASOURCE_USERNAME=univer
      - SPRING_DATASOURCE_PASSWORD=univer
      - SPRING_JPA_HIBERNATE_DDL-AUTO=update
    ports:
      - "8084:8084"
    networks:
      - microservices-net
    depends_on:
      mysql:
        condition: service_started
      discovery-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  etudiant-service:
    build:
      context: ./services/Etudiant
      dockerfile: Dockerfile
    container_name: etudiant-service
    image: ezzdinbz/etudiant-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/etudiant
      - SPRING_DATASOURCE_USERNAME= univer
      - SPRING_DATASOURCE_PASSWORD= univer
      - SPRING_JPA_HIBERNATE_DDL-AUTO=update
    ports:
      - "8089:8089"
    networks:
      - microservices-net
    depends_on:
      mysql:
        condition: service_started
      discovery-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8089/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  reservation-service:
    build:
      context: ./services/Reservation
      dockerfile: Dockerfile
    container_name: reservation-service
    image: ezzdinbz/reservation-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
      - SPRING_DATASOURCE_URL=jdbc:h2:file:./Database/Data/Reservation
      - SPRING_DATASOURCE_USERNAME=sa
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_HIBERNATE_DDL-AUTO=update
      - SPRING_H2_CONSOLE_ENABLED=true
      - SPRING_H2_CONSOLE_SETTINGS_WEB-ALLOW-OTHERS=true
    volumes:
      - reservation-h2-data:/app/Database/Data
    ports:
      - "8082:8082"
    networks:
      - microservices-net
    depends_on:
      discovery-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

networks:
  microservices-net:
    driver: bridge

volumes:
  mysql_data:
  mongo:
  foyer-h2-data:
  university-h2-data:
  reservation-h2-data:
  keycloak_data:
